from flask import Flask, render_template, request, redirect, url_for, jsonify, session
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import UnexpectedAlertPresentException, NoSuchElementException, TimeoutException
import time
import datetime
import os
from selenium.webdriver.common.alert import Alert
from selenium.common.exceptions import TimeoutException

app = Flask(__name__)
app.secret_key = 'somesecretkey'  

global_qr_key_variable = None 
global driver, main_window_handle, second_main_window_handle
driver = None
main_window_handle = None
second_main_window_handle = None

drivers = {}  # 각 세션에 대한 드라이버 저장
@app.route('/start_session')
def start_session():
    session_id = str(uuid4())
    session['id'] = session_id
    drivers[session_id] = webdriver.Chrome()  # 새로운 드라이버 인스턴스 생성
    return 'Session started'

@app.route('/guide')
def guide():
    return render_template('guide.html')

@app.route('/make_reservation', methods=['GET'])
def make_reservation():
    global global_qr_key_variable, driver, main_window_handle
    username = request.args.get('username')
    password = request.args.get('password')
    team_name = request.args.get('team_name')
    phone = request.args.get('phone')
    
    desired_time_slots = request.args.getlist('desired_time_slots')  # 선택된 시간대 리스트를 가져옴
    desired_time_input = request.args.get('desired_time') or "09:00"  # 선택된 시간을 가져옴. 기본값은 09:00
    desired_time = datetime.datetime.strptime(desired_time_input, "%H:%M").time()

    court_number = request.args.get('court_number')

    session['team_name'] = team_name
    session['phone'] = phone

    try:
        driver_path = '/Users/1112231/Downloads/chromedriver-mac-x64_116/chromedriver'
        service = Service(driver_path)

        # 크롬 웹드라이버를 실행합니다.
        driver = webdriver.Chrome(service=service)

        # 웹사이트에 접속합니다.
        url = "https://www.ycs.or.kr/fmcs/133"
        driver.get(url)

        # 로그인 정보를 입력하고 로그인 버튼을 누릅니다.
        username_field = driver.find_element(By.CSS_SELECTOR, "#user_id")
        username_field.send_keys(username)
        password_field = driver.find_element(By.CSS_SELECTOR, "#user_password")
        password_field.send_keys(password)
        login_button = driver.find_element(By.XPATH, "//button[text()='로그인']")
        login_button.click()

        # 예약 페이지로 이동합니다.
        url = "https://www.ycs.or.kr/fmcs/4"
        driver.get(url)

        # 원하는 센터를 선택합니다.
        select_field = Select(driver.find_element(By.CSS_SELECTOR, "#center"))
        select_field.select_by_value("YCS04")
        time.sleep(2)

        # 다음달 이동
        next_month_button = driver.find_element(By.ID, 'next_month')
        next_month_button.click()
        time.sleep(2)
                
        # 이전달 이동
        next_month_button = driver.find_element(By.ID, 'prev_month')
        next_month_button.click()
        time.sleep(2)

        while True:
            current_time = datetime.datetime.now().time()
            if current_time >= desired_time:
                break
            else:
                time.sleep(1)  # CPU 사용량을 줄이기 위해 1초 동안 잠깁니다.
               
        select_court_field = Select(driver.find_element(By.ID, "place"))
        select_court_field.select_by_value(court_number) # 코트 번호로 선택

        # 현재 날짜를 얻고 7일을 더합니다.
        date_in_7_days = datetime.date.today() + datetime.timedelta(days=7)

        # 날짜를 적절한 형식의 문자열로 변환합니다.
        date_str = date_in_7_days.strftime('%Y%m%d')

        # 해당 날짜를 선택합니다.
        date_field = driver.find_element(By.CSS_SELECTOR, f"#date-{date_str} > strong")
        date_field.click()
        time.sleep(1)

        main_window_handle = driver.current_window_handle

        # 원하는 시간대를 선택합니다.
        for time_slot in desired_time_slots:
            time_slot_checkbox = driver.find_element(By.CSS_SELECTOR, "#" + time_slot)
            time_slot_checkbox.click()
            
        # 휴대폰 인증 버튼을 클릭합니다.
        phone_verification_button = driver.find_element(By.XPATH, "//button[text()='신청자 휴대폰 인증']")
        phone_verification_button.click()
        time.sleep(3)
        return redirect(url_for('qr_authentication'))
    
    except Exception as e:
        if driver:
            driver.quit()
        return str(e)



@app.route('/qr_authentication', methods=['GET'])
def qr_authentication():
    global driver
    if driver is None:
        return "Driver not initialized", 500

    # 새 창으로 전환합니다.
    window_handles = driver.window_handles
    driver.switch_to.window(window_handles[-1])

    # QR 인증 이미지 클릭을 시도합니다.
    try:
        qr_activation_image = driver.find_element(By.CSS_SELECTOR, "#pattern_inactive")
        driver.execute_script("arguments[0].click();", qr_activation_image)
    except UnexpectedAlertPresentException:
        # 알림을 닫고 오류 처리를 추가합니다.
        alert = driver.switch_to.alert
        alert.accept()

    # QR 코드를 추출합니다.
    qr_code_image = driver.find_element(By.CSS_SELECTOR, "img#qr_box")

    # 해당 웹 요소의 스크린샷을 이미지 파일로 저장합니다.
    image_path = os.path.join('static', 'temp_qr_code.png')
    qr_code_image.screenshot(image_path)
    # HTML 템플릿에 이미지 경로를 전달하여 렌더링합니다.
    return render_template('qr_code.html', qr_code_url=image_path)



@app.route('/receive_qr_key', methods=['POST'])
def receive_qr_key():
    global driver
    qr_key = request.json['qr_key']
    print("Received QR Key:", qr_key) # 디버깅을 위한 로깅

    # 해당 필드에 QR 인증 키 삽입
    qr_field = driver.find_element(By.ID, "qr_number")
    qr_field.send_keys(qr_key)

    # "인증" 버튼 클릭
    auth_button = driver.find_element(By.CSS_SELECTOR, "#container_qr > div.mt-2 > div.button_contents.mt-4 > div > div.col-3 > button")
    auth_button.click()

    wait = WebDriverWait(driver, 10)
    alert = wait.until(EC.alert_is_present())
    alert = Alert(driver)
    alert.accept()

    return redirect(url_for('continue_reservation'))

@app.route('/continue_reservation', methods=['GET'])
def continue_reservation():
    global main_window_handle, second_main_window_handle
    # 세션에서 값을 불러옵니다.
    team_name = session['team_name']
    phone = session['phone']

    try:
        driver.switch_to.window(main_window_handle)
        wait = WebDriverWait(driver, 10)
        booking_button = wait.until(EC.element_to_be_clickable((By.CLASS_NAME, "action_application")))
        booking_button.click()

        
        wait = WebDriverWait(driver, 10)
        alert = wait.until(EC.alert_is_present())
        alert = Alert(driver)
        alert.accept()
        
        # 사용자 입력 대기 (이 곳에서 스크립트 실행이 멈춥니다)
        second_main_window_handle = driver.current_window_handle
        

        team_name_field = driver.find_element(By.ID, "team_nm")
        team_name_field.send_keys(team_name)
        participants_field = driver.find_element(By.ID, "users")
        participants_field.send_keys("2")
        phone_field = driver.find_element(By.ID, "tel")
        phone_field.clear()
        phone_field.send_keys(phone)
        purpose_field = driver.find_element(By.ID, "purpose")
        purpose_field.send_keys("테니스")
        agree_checkbox = driver.find_element(By.ID, "agree_use1")
        agree_checkbox.click()


        phone_verification_button = driver.find_element(By.XPATH, "//button[text()='신청자 휴대폰 인증']")
        phone_verification_button.click()
        
        # 새 창으로 전환합니다.
        window_handles = driver.window_handles
        driver.switch_to.window(window_handles[-1])

        # 문자 인증 이미지 클릭을 시도합니다.
        try:
            message_activation_image = driver.find_element(By.CSS_SELECTOR, "#message_inactive")
            driver.execute_script("arguments[0].click();", message_activation_image)
        except UnexpectedAlertPresentException:
            # 알림을 닫고 오류 처리를 추가합니다.
            alert = driver.switch_to.alert
            alert.accept()
            # 필요한 경우 여기에 추가 오류 처리를 구현합니다.

        # 사용자 입력 대기 (이 곳에서 스크립트 실행이 멈춥니다)
        input("휴대폰 인증을 진행한 후 예약 등록진행 완료하세요. 아무 키나 누르세요...")
        

        try:
            alert = driver.switch_to.alert
            print(alert.text) # 알림 메시지를 출력하거나 로깅
            alert.accept()    # 알림을 닫습니다.
        except NoAlertPresentException:
            print("No alert present") # 알림이 없는 경우 처리
    
        # 예약이 완료되면 성공 메시지 반환
        return jsonify({'status': 'success', 'message': 'Reservation continued'})
    except Exception as e:
    # 예외 발생시 오류 메시지 반환
        return jsonify({'status': 'error', 'message': str(e)})

@app.route('/send_phone_number', methods=['POST'])
def send_phone_number():
    global driver
    phone_number = request.json['phone_number']
    # 휴대폰 번호 전송과 관련된 로직
    # 휴대폰 번호 입력
    wait = WebDriverWait(driver, 2)

    phone_number_field = driver.find_element(By.ID, "phone_number")
    phone_number_field = wait.until(EC.presence_of_element_located((By.ID, "phone_number")))
    phone_number_field.send_keys(phone_number)
    # 인증 번호 발송 버튼 클릭
    send_number_button = driver.find_element(By.CSS_SELECTOR, ".btn.btn-lg.btn-secondary")
    send_number_button.click()
    
    # Alert 창이 뜰 때까지 대기
    wait = WebDriverWait(driver, 10)
    alert = wait.until(EC.alert_is_present())
    # Alert 객체 생성
    alert = Alert(driver)
    # Alert 창의 확인 버튼 클릭
    alert.accept()
    
    # Alert 창이 뜰 때까지 대기
    wait = WebDriverWait(driver, 10)
    alert = wait.until(EC.alert_is_present())
    # Alert 객체 생성
    alert = Alert(driver)
    # Alert 창의 확인 버튼 클릭
    alert.accept()
        
    try:
        alert = wait.until(EC.alert_is_present())
    except TimeoutException:
        # 예외가 발생했을 때 수행할 코드
        pass
    
    return jsonify({'status': 'success', 'message': 'Verification code sent'})

@app.route('/verify_phone_number', methods=['POST'])
def verify_phone_number():
    global driver

    verification_code = request.json['verification_code']
    # 인증번호 입력 칸에 수신된 인증번호 입력
    verification_code_field = driver.find_element(By.ID, "check_number")

    # 사용자가 인증번호를 입력할 때까지 최대 300초(5분) 기다립니다.
    wait = WebDriverWait(driver, 300)
    wait.until(EC.text_to_be_present_in_element_value((By.ID, "check_number"), verification_code_field.get_attribute('value')))
    # 인증번호 입력 칸에 수신된 인증번호 입력
    verification_code_field.send_keys(verification_code)
   # time.sleep(60) 
    # 인증 버튼 클릭
    verify_button = driver.find_element(By.XPATH, "//b[text()='인증']")
    verify_button.click()

    # Alert 창이 뜰 때까지 최대 10초 동안 대기합니다.
    wait = WebDriverWait(driver, 20)
    try:
        alert = wait.until(EC.alert_is_present())
        alert = Alert(driver)
        alert.accept() # Alert 창의 확인 버튼을 클릭합니다.
    except TimeoutException:
        print("경고창이 나타나지 않았습니다.")


    return jsonify({'status': 'success', 'message': 'Phone authentication completed'})

@app.route('/complete_reservation', methods=['GET'])
def complete_reservation():
    global second_main_window_handle

    driver.switch_to.window(second_main_window_handle)

    # Alert 창이 나타나면 닫기
    wait = WebDriverWait(driver, 1)
    try:
        alert = wait.until(EC.alert_is_present())
        alert.accept()
    except TimeoutException:
        print("경고창이 나타나지 않았습니다.")

    reserve_button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "button.action_write")))
    reserve_button.click()

    try:
        alert = driver.switch_to.alert
        alert.accept()
    except NoAlertPresentException:
        pass

    time.sleep(3) 
    driver.quit()    
    return jsonify(status='success', message='예약이 성공적으로 등록되었는지 홈페이지에서 확인하세요.')  # JSON 응답


if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5002)
